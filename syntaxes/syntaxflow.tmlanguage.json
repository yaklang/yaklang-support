{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "SyntaxFlow",
    "scopeName": "source.syntaxflow",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#blocks"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#types"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#identifiers"
        }
    ],
    "repository": {
        "comments": {
            "name": "comment.line.double-slash.syntaxflow",
            "match": "//.*$"
        },
        "blocks": {
            "patterns": [
                {
                    "name": "meta.string.heredoc.syntaxflow",
                    "begin": "(<<<)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "0": {
                            "name": "comment.line.double-slash.syntaxflow"
                        }
                    },
                    "end": "^\\s*(\\2)",
                    "endCaptures": {
                        "0": {
                            "name": "comment.line.double-slash.syntaxflow"
                        }
                    },
                    "contentName": "string.unquoted.heredoc.content.syntaxflow"
                },
                {
                    "name": "meta.function-call.native.syntaxflow",
                    "begin": "<",
                    "end": ">",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.begin.syntaxflow"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.syntaxflow"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.parameters.native.syntaxflow",
                            "begin": "\\(|\\{",
                            "end": "\\)|\\}",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.section.parameters.begin.syntaxflow"
                                }
                            },
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.section.parameters.end.syntaxflow"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#self"
                                }
                            ]
                        },
                        {
                            "name": "entity.name.function.native.syntaxflow",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                        }
                    ]
                },
                {
                    "name": "meta.embedded.block.file-filter.syntaxflow",
                    "begin": "\\$\\{",
                    "end": "\\}",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.embedded.begin.syntaxflow"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.embedded.end.syntaxflow"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#self"
                        }
                    ]
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "string.quoted.syntaxflow",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.syntaxflow",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.syntaxflow",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.syntaxflow",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.regexp.syntaxflow",
                    "begin": "/",
                    "end": "/[gimuy]*",
                    "patterns": [
                        {
                            "name": "constant.character.escape.syntaxflow",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "constant.numeric.hex.syntaxflow",
                    "match": "\\b0x[a-fA-F0-9]+\\b"
                },
                {
                    "name": "constant.numeric.binary.syntaxflow",
                    "match": "\\b0b[01]+\\b"
                },
                {
                    "name": "constant.numeric.octal.syntaxflow",
                    "match": "\\b0o[0-7]+\\b"
                },
                {
                    "name": "constant.numeric.decimal.syntaxflow",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.language.boolean.syntaxflow",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.syntaxflow",
                    "match": "\\b(?i:Check|Then|Else|In)\\b"
                },
                {
                    "name": "support.function.keyword.syntaxflow",
                    "match": "\\b(?i:Have|HaveAny|VersionIn|Opcode)\\b"
                },
                {
                    "name": "keyword.other.syntaxflow",
                    "match": "\\b(?i:As|Desc|alert|for)\\b"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.type.syntaxflow",
                    "match": "\\b(Type|string|int|number|list|dict|bool)\\b"
                },
                {
                    "name": "support.type.opcodes.syntaxflow",
                    "match": "\\b(Call|Constant|Phi|FormalParam|Return|Function)\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.dollar.syntaxflow",
                    "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*|\\$\\([a-zA-Z_][a-zA-Z0-9_]*\\)"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arrow.syntaxflow",
                    "match": "-->|-{\\s*.*?\\s*}->|#{\\s*.*?\\s*}->|#->|#>"
                },
                {
                    "name": "keyword.operator.filter.syntaxflow",
                    "match": "\\.\\.\\.|\\?{|->|\\+|\\-|&"
                },
                {
                    "name": "keyword.operator.logical.syntaxflow",
                    "match": "&&|\\|\\||\\b(not)\\b|!"
                },
                {
                    "name": "keyword.operator.comparison.syntaxflow",
                    "match": "==|!=|>=|<=|=~|!~|>|<|="
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "meta.brace.round.syntaxflow",
                    "match": "[()]"
                },
                {
                    "name": "meta.brace.curly.syntaxflow",
                    "match": "[{}]"
                },
                {
                    "name": "meta.brace.square.syntaxflow",
                    "match": "[\\[\\]]"
                },
                {
                    "name": "punctuation.terminator.statement.syntaxflow",
                    "match": ";"
                },
                {
                    "name": "punctuation.separator.comma.syntaxflow",
                    "match": ","
                },
                {
                    "name": "punctuation.accessor.dot.syntaxflow",
                    "match": "\\."
                },
                {
                    "name": "punctuation.separator.key-value.syntaxflow",
                    "match": ":"
                }
            ]
        },
        "identifiers": {
            "name": "entity.name.type.class.syntaxflow",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
    }
}